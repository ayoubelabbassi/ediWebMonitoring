/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-backend-jpa
 */
package ma.sgma.edi2.domain;

import static javax.persistence.GenerationType.IDENTITY;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Digits;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlTransient;

import org.hibernate.validator.constraints.NotEmpty;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.MoreObjects;
import com.google.common.base.Objects;
import com.jaxio.jpa.querybyexample.Identifiable;

@Entity
@Table(name = "sgedi_dictodc")
public class SgediDictodc implements Identifiable<Integer>, Serializable {
    private static final long serialVersionUID = 1L;
    private static final Logger log = LoggerFactory.getLogger(SgediDictodc.class);

    // Raw attributes
    private Integer id;
    private Integer code;
    private String libelle;
    private String lib1;
    private String lib2;
    private String lib3;
    // -- [id] ------------------------

    @Override
    @Column(name = "id", precision = 10)
    @GeneratedValue(strategy = IDENTITY)
    @Id
    public Integer getId() {
        return id;
    }

    @Override
    public void setId(Integer id) {
        this.id = id;
    }

    public SgediDictodc id(Integer id) {
        setId(id);
        return this;
    }

    @Override
    @Transient
    @XmlTransient
    public boolean isIdSet() {
        return id != null;
    }
    // -- [code] ------------------------

    @Digits(integer = 10, fraction = 0)
    @NotNull
    @Column(name = "code", nullable = false, precision = 10)
    public Integer getCode() {
        return code;
    }

    public void setCode(Integer code) {
        this.code = code;
    }

    public SgediDictodc code(Integer code) {
        setCode(code);
        return this;
    }
    // -- [libelle] ------------------------

    @NotEmpty
    @Size(max = 100)
    @Column(name = "libelle", nullable = false, length = 100)
    public String getLibelle() {
        return libelle;
    }

    public void setLibelle(String libelle) {
        this.libelle = libelle;
    }

    public SgediDictodc libelle(String libelle) {
        setLibelle(libelle);
        return this;
    }
    // -- [lib1] ------------------------

    @Size(max = 100)
    @Column(name = "lib1", length = 100)
    public String getLib1() {
        return lib1;
    }

    public void setLib1(String lib1) {
        this.lib1 = lib1;
    }

    public SgediDictodc lib1(String lib1) {
        setLib1(lib1);
        return this;
    }
    // -- [lib2] ------------------------

    @Size(max = 100)
    @Column(name = "lib2", length = 100)
    public String getLib2() {
        return lib2;
    }

    public void setLib2(String lib2) {
        this.lib2 = lib2;
    }

    public SgediDictodc lib2(String lib2) {
        setLib2(lib2);
        return this;
    }
    // -- [lib3] ------------------------

    @Size(max = 100)
    @Column(name = "lib3", length = 100)
    public String getLib3() {
        return lib3;
    }

    public void setLib3(String lib3) {
        this.lib3 = lib3;
    }

    public SgediDictodc lib3(String lib3) {
        setLib3(lib3);
        return this;
    }

    /**
     * Apply the default values.
     */
    public SgediDictodc withDefaults() {
        return this;
    }

    /**
     * Equals implementation using a business key.
     */
    @Override
    public boolean equals(Object other) {
        return this == other || (other instanceof SgediDictodc && hashCode() == other.hashCode());
    }

    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();

    @Override
    public int hashCode() {
        return identifiableHashBuilder.hash(log, this);
    }

    /**
     * Construct a readable string representation for this SgediDictodc instance.
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this) //
                .add("id", getId()) //
                .add("code", getCode()) //
                .add("libelle", getLibelle()) //
                .add("lib1", getLib1()) //
                .add("lib2", getLib2()) //
                .add("lib3", getLib3()) //
                .toString();
    }
}