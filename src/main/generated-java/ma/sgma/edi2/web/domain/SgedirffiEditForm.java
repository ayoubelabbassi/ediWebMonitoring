/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package ma.sgma.edi2.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;
import javax.validation.constraints.NotNull;

import ma.sgma.edi2.domain.SgediDictodc;
import ma.sgma.edi2.domain.SgediParams;
import ma.sgma.edi2.domain.SgediTitrerffi;
import ma.sgma.edi2.domain.Sgedirffi;
import ma.sgma.edi2.domain.SgedirffiErrors;
import ma.sgma.edi2.domain.Sgedirffi_;
import ma.sgma.edi2.domain.Sgedixml;
import ma.sgma.edi2.domain.Userrole;
import ma.sgma.edi2.repository.SgedirffiRepository;
import ma.sgma.edi2.util.Constant;
import ma.sgma.edi2.web.domain.support.GenericEditForm;
import ma.sgma.edi2.web.domain.support.GenericToManyAssociation;
import ma.sgma.edi2.web.domain.support.GenericToOneAssociation;
import ma.sgma.edi2.web.faces.ConversationContextScoped;
import ma.sgma.edi2.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link Sgedirffi}.
 */
@Named
@ConversationContextScoped
public class SgedirffiEditForm extends GenericEditForm<Sgedirffi, Integer> {
    @Inject
    protected SgedirffiController sgedirffiController;
    @Inject
    protected SgedixmlController sgedixmlController;
    protected GenericToOneAssociation<Sgedixml, Integer> idXml;
    @Inject
    protected SgediDictodcController sgediDictodcController;
    protected GenericToOneAssociation<SgediDictodc, Integer> typeIdentification;
    @Inject
    protected SgediParamsController sgediParamsController;
    protected GenericToOneAssociation<SgediParams, Integer> statutInt;
    protected GenericToOneAssociation<SgediDictodc, Integer> qualite;
    @Inject
    protected UserroleController userroleController;
    protected GenericToOneAssociation<Userrole, Integer> codeRole;
    protected GenericToOneAssociation<SgediDictodc, Integer> categorieFormule;
    protected GenericToOneAssociation<SgediDictodc, Integer> sensOperation;
    protected GenericToOneAssociation<SgediParams, Integer> statutEch;
    @Inject
    protected SgedirffiErrorsController sgedirffiErrorsController;
    protected GenericToManyAssociation<SgedirffiErrors, Integer> sgedirffiErrorss;
    @Inject
    protected SgediTitrerffiController sgediTitrerffiController;
    protected GenericToManyAssociation<SgediTitrerffi, Integer> sgediTitrerffis;
    protected TabBean tabBean = new TabBean();

    @Inject
    public SgedirffiEditForm(SgedirffiRepository sgedirffiRepository, SgedirffiGraphLoader sgedirffiGraphLoader) {
        super(sgedirffiRepository, sgedirffiGraphLoader);
        this.setModule("RFFI");
    }


    public String profil ;

    public String getProfil() {
        return profil;
    }

    public void setProfil(String profil) {
        this.profil = profil;
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    @Override
    public TabBean getTabBean() {
        return tabBean;
    }

    /**
     * The entity to edit/view.
     */
    public Sgedirffi getSgedirffi() {
        return getEntity();
    }

    public String print() {
        return sgedirffiController.print(getSgedirffi());
    }

    @PostConstruct
    void setupIdXmlActions() {
        idXml = new GenericToOneAssociation<Sgedixml, Integer>(sgedixmlController, Sgedirffi_.idXml) {
            @Override
            protected Sgedixml get() {
                return getSgedirffi().getIdXml();
            }

            @Override
            protected void set(Sgedixml sgedixml) {
                getSgedirffi().setIdXml(sgedixml);
            }
        };
    }

    public GenericToOneAssociation<Sgedixml, Integer> getIdXml() {
        return idXml;
    }

    @PostConstruct
    void setupTypeIdentificationActions() {
        typeIdentification = new GenericToOneAssociation<SgediDictodc, Integer>(sgediDictodcController, Sgedirffi_.typeIdentification) {
            @Override
            protected SgediDictodc get() {
                return getSgedirffi().getTypeIdentification();
            }

            @Override
            protected void set(SgediDictodc sgediDictodc) {
                getSgedirffi().setTypeIdentification(sgediDictodc);
            }
        };
    }

    public GenericToOneAssociation<SgediDictodc, Integer> getTypeIdentification() {
        return typeIdentification;
    }

    @PostConstruct
    void setupStatutIntActions() {
        statutInt = new GenericToOneAssociation<SgediParams, Integer>(sgediParamsController, Sgedirffi_.statutInt) {
            @Override
            protected SgediParams get() {
                return getSgedirffi().getStatutInt();
            }

            @Override
            protected void set(SgediParams sgediParams) {
                getSgedirffi().setStatutInt(sgediParams);
            }
        };
    }

    public GenericToOneAssociation<SgediParams, Integer> getStatutInt() {
        return statutInt;
    }

    @PostConstruct
    void setupQualiteActions() {
        qualite = new GenericToOneAssociation<SgediDictodc, Integer>(sgediDictodcController, Sgedirffi_.qualite) {
            @Override
            protected SgediDictodc get() {
                return getSgedirffi().getQualite();
            }

            @Override
            protected void set(SgediDictodc sgediDictodc) {
                getSgedirffi().setQualite(sgediDictodc);
            }
        };
    }

    public GenericToOneAssociation<SgediDictodc, Integer> getQualite() {
        return qualite;
    }

    @PostConstruct
    void setupCodeRoleActions() {
        codeRole = new GenericToOneAssociation<Userrole, Integer>(userroleController, Sgedirffi_.codeRole) {
            @Override
            protected Userrole get() {
                return getSgedirffi().getCodeRole();
            }

            @Override
            protected void set(Userrole userrole) {
                getSgedirffi().setCodeRole(userrole);
            }
        };
    }

    public GenericToOneAssociation<Userrole, Integer> getCodeRole() {
        return codeRole;
    }

    @PostConstruct
    void setupCategorieFormuleActions() {
        categorieFormule = new GenericToOneAssociation<SgediDictodc, Integer>(sgediDictodcController, Sgedirffi_.categorieFormule) {
            @Override
            protected SgediDictodc get() {
                return getSgedirffi().getCategorieFormule();
            }

            @Override
            protected void set(SgediDictodc sgediDictodc) {
                getSgedirffi().setCategorieFormule(sgediDictodc);
            }

            @NotNull
            @Override
            public SgediDictodc getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<SgediDictodc, Integer> getCategorieFormule() {
        return categorieFormule;
    }

    @PostConstruct
    void setupSensOperationActions() {
        sensOperation = new GenericToOneAssociation<SgediDictodc, Integer>(sgediDictodcController, Sgedirffi_.sensOperation) {
            @Override
            protected SgediDictodc get() {
                return getSgedirffi().getSensOperation();
            }

            @Override
            protected void set(SgediDictodc sgediDictodc) {
                getSgedirffi().setSensOperation(sgediDictodc);
            }

            @NotNull
            @Override
            public SgediDictodc getSelected() {
                return super.getSelected();
            }
        };
    }

    public GenericToOneAssociation<SgediDictodc, Integer> getSensOperation() {
        return sensOperation;
    }

    @PostConstruct
    void setupStatutEchActions() {
        statutEch = new GenericToOneAssociation<SgediParams, Integer>(sgediParamsController, Sgedirffi_.statutEch) {
            @Override
            protected SgediParams get() {
                return getSgedirffi().getStatutEch();
            }

            @Override
            protected void set(SgediParams sgediParams) {
                getSgedirffi().setStatutEch(sgediParams);
            }
        };
    }

    public GenericToOneAssociation<SgediParams, Integer> getStatutEch() {
        return statutEch;
    }

    @PostConstruct
    void setupSgedirffiErrorssActions() {
        sgedirffiErrorss = new GenericToManyAssociation<SgedirffiErrors, Integer>(getSgedirffi().getSgedirffiErrorss(), sgedirffiErrorsController,
                Sgedirffi_.sgedirffiErrorss) {
            @Override
            protected void remove(SgedirffiErrors sgedirffiErrors) {
                getSgedirffi().removeSgedirffiErrors(sgedirffiErrors);
            }

            @Override
            protected void add(SgedirffiErrors sgedirffiErrors) {
                getSgedirffi().addSgedirffiErrors(sgedirffiErrors);
            }

            @Override
            protected void onCreate(SgedirffiErrors sgedirffiErrors) {
                sgedirffiErrors.setCoderffi(getSgedirffi()); // for display
            }
        };
    }

    public GenericToManyAssociation<SgedirffiErrors, Integer> getSgedirffiErrorss() {
        return sgedirffiErrorss;
    }

    @PostConstruct
    void setupSgediTitrerffisActions() {
        sgediTitrerffis = new GenericToManyAssociation<SgediTitrerffi, Integer>(getSgedirffi().getSgediTitrerffis(), sgediTitrerffiController,
                Sgedirffi_.sgediTitrerffis) {
            @Override
            protected void remove(SgediTitrerffi sgediTitrerffi) {
                getSgedirffi().removeSgediTitrerffi(sgediTitrerffi);
            }

            @Override
            protected void add(SgediTitrerffi sgediTitrerffi) {
                getSgedirffi().addSgediTitrerffi(sgediTitrerffi);
            }

            @Override
            protected void onCreate(SgediTitrerffi sgediTitrerffi) {
                sgediTitrerffi.setIdrffi(getSgedirffi()); // for display
            }
        };
    }

    public GenericToManyAssociation<SgediTitrerffi, Integer> getSgediTitrerffis() {
        return sgediTitrerffis;
    }

    public void affecter(){
        this.getEntity().setAffectprofil(getProfil());
        saveEntity(this.getEntity());
        messageUtil.infoEntity("status_saved_ok", this.getEntity());

    }

    public boolean valider(Sgedirffi entite){
        return true;
    }

    public void envoyerODC(){

        if(valider(this.getEntity())){
            //Statut in a lecture
            SgediParams intg  = sgediParamsController.getRepository().getById(Constant.STATUT_LU);;
            SgediParams echa = sgediParamsController.getRepository().getById(Constant.A_ENVOYER);


            this.getEntity().setStatutEch(echa);
            this.getEntity().setStatutInt(intg);

            saveEntity(this.getEntity());
            messageUtil.infoEntity("status_saved_ok", this.getEntity());
        }
    }
}
