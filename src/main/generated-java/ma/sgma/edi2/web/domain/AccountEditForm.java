/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package ma.sgma.edi2.web.domain;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.inject.Named;

import ma.sgma.edi2.domain.Account;
import ma.sgma.edi2.domain.Account_;
import ma.sgma.edi2.domain.Userrole;
import ma.sgma.edi2.repository.AccountRepository;
import ma.sgma.edi2.web.domain.support.GenericEditForm;
import ma.sgma.edi2.web.domain.support.GenericToManyAssociation;
import ma.sgma.edi2.web.faces.ConversationContextScoped;
import ma.sgma.edi2.web.util.TabBean;

/**
 * View Helper/Controller to edit {@link Account}.
 */
@Named
@ConversationContextScoped
public class AccountEditForm extends GenericEditForm<Account, Integer> {
    @Inject
    protected AccountController accountController;
    @Inject
    protected UserroleController userroleController;
    protected GenericToManyAssociation<Userrole, Integer> securityRoles;
    protected TabBean tabBean = new TabBean();

    @Inject
    public AccountEditForm(AccountRepository accountRepository, AccountGraphLoader accountGraphLoader) {
        super(accountRepository, accountGraphLoader);
    }

    /**
     * View helper to store the x-to-many associations tab's index. 
     */
    @Override
    public TabBean getTabBean() {
        return tabBean;
    }

    /**
     * The entity to edit/view.
     */
    public Account getAccount() {
        return getEntity();
    }

    public String print() {
        return accountController.print(getAccount());
    }

    @PostConstruct
    void setupSecurityRolesActions() {
        securityRoles = new GenericToManyAssociation<Userrole, Integer>(getAccount().getSecurityRoles(), userroleController, Account_.securityRoles) {
            @Override
            protected void remove(Userrole userrole) {
                getAccount().removeSecurityRole(userrole);
            }

            @Override
            protected void add(Userrole userrole) {
                // add the object only to the securityRole side of the relation 
                getAccount().getSecurityRoles().add(userrole);
            }
        };
    }

    public GenericToManyAssociation<Userrole, Integer> getSecurityRoles() {
        return securityRoles;
    }
}
