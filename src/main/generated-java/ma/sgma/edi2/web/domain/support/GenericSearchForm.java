/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericSearchForm.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-jsf2-spring-conversation
 */
package ma.sgma.edi2.web.domain.support;

import java.io.Serializable;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.inject.Inject;

import com.jaxio.jpa.querybyexample.Identifiable;
import com.jaxio.jpa.querybyexample.SearchParameters;
import com.jaxio.jpa.querybyexample.TermSelector;

import ma.sgma.edi2.domain.SgediDictodc;
import ma.sgma.edi2.domain.SgediParams;
import ma.sgma.edi2.repository.SgediDictodcRepository;
import ma.sgma.edi2.repository.SgediParamsRepository;
import ma.sgma.edi2.web.conversation.Conversation;
import ma.sgma.edi2.web.conversation.ConversationContext;
import ma.sgma.edi2.web.conversation.ConversationManager;
import ma.sgma.edi2.web.util.MessageUtil;
import org.springframework.beans.factory.annotation.Autowired;

import static com.google.common.base.Throwables.propagate;
import static com.jaxio.jpa.querybyexample.PropertySelector.newPropertySelector;

/**
 * Base Search Form for JPA entities.
 */
public abstract class GenericSearchForm<E extends Identifiable<PK>, PK extends Serializable, F extends GenericSearchForm<E, PK, F>> extends CommonAction<E>
        implements Serializable {
    private static final long serialVersionUID = 1L;

    @Inject
    private transient ConversationManager conversationManager;
    @Inject
    private transient MessageUtil messageUtil;

    @Autowired
    private SgediDictodcRepository sgediDictodcRepository ;
    @Autowired
    private SgediParamsRepository sgediParamsRepository ;


    @SuppressWarnings("unchecked")
    @PostConstruct
    public void init() {
        Conversation currentConversation = conversationManager.getCurrentConversation();
        if (currentConversation == null) {
            return;
        }

        ConversationContext<?> currentContext = currentConversation.getCurrentContext();
        if (currentContext != null && currentContext.getBean(getPrefilledFormName(), getClass()) != null) {
            resetWithOther((F) currentContext.getBean(getPrefilledFormName(), getClass()));
        }
    }

    public String getPrefilledFormName() {
        return "_" + this.getClass().getName() + "_prefilled_";
    }

    /**
     * Return the entity example used in this search form.
     */
    protected abstract E getEntity();

    protected TermSelector termsOnAll = new TermSelector();

    public TermSelector getTermsOnAll() {
        return termsOnAll;
    }

    /**
     * Convert all the search inputs into a new @{link SearchParameters}. 
     */
    public abstract SearchParameters toSearchParameters();

    /**
     * default search parameters
     */
    public SearchParameters searchParameters() {
        return new SearchParameters() //
                .limitBroadSearch() //
                .distinct() //
                .anywhere() //
                .caseInsensitive();
    }

    // Reset related

    public abstract F newInstance();

    public abstract void resetWithOther(F other);

    public void reset() {
        messageUtil.info("search_reseted");
        resetWithOther(newInstance());
    }


    public List<SgediDictodc> listDico(String code) {

        try {
            SearchParameters searchParameters = new SearchParameters() //
                    .limitBroadSearch() //
                    .caseInsensitive() //
                    .anywhere() //
                    .distinct() //
                    .orMode();
            SgediDictodc template = sgediDictodcRepository.getNew();
            template.setLib1(code);
            searchParameters.anywhere().caseInsensitive();
            searchParameters.addProperty(newPropertySelector("lib1", sgediDictodcRepository.getType()).selected(code));
            List<SgediDictodc> ee = sgediDictodcRepository.find(template);
            return ee;
        }
        catch (Exception e) {

            throw propagate(e);
        }


    }

    public List<SgediParams> listParams(String code) {

        try {
            SearchParameters searchParameters = new SearchParameters() //
                    .limitBroadSearch() //
                    .caseInsensitive() //
                    .anywhere() //
                    .distinct() //
                    .orMode();
            SgediParams template = sgediParamsRepository.getNew();
            template.setCode(code);
            searchParameters.anywhere().caseInsensitive();
            searchParameters.addProperty(newPropertySelector("code", sgediParamsRepository.getType()).selected(code));
            List<SgediParams> ee = sgediParamsRepository.find(template);
            return ee;
        }
        catch (Exception e) {

            throw propagate(e);
        }


    }
}
