/*
 * Source code generated by Celerio, a Jaxio product.
 * Documentation: http://www.jaxio.com/documentation/celerio/
 * Follow us on twitter: @jaxiosoft
 * Need commercial support ? Contact us: info@jaxio.com
 * Template pack-backend-jpa:src/main/java/service/AuditLogService.p.vm.java
 * Template is part of Open Source Project: https://github.com/jaxio/pack-backend-jpa
 */
package ma.sgma.edi2.service;

import static com.google.common.collect.Lists.newArrayList;

import java.util.Date;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Lazy;
import org.springframework.scheduling.annotation.Scheduled;

import ma.sgma.edi2.context.UserContext;
import ma.sgma.edi2.domain.Auditlog;

@Named
@Singleton
@Lazy(false)
public class AuditLogService {
    private static final Logger log = LoggerFactory.getLogger(AuditLogService.class);
    private static final int DEFAULT_BATCH_INSERT_SIZE = 50;
    @Inject
    private SessionFactory sessionFactory;
    protected BlockingQueue<Auditlog> queue = new LinkedBlockingQueue<Auditlog>(1000);
    protected int batchInsertSize = DEFAULT_BATCH_INSERT_SIZE;

    @Scheduled(fixedDelay = 1 * 1000)
    public void batchInsert() {
        List<Auditlog> httpEvents = newArrayList();
        int size = queue.drainTo(httpEvents, batchInsertSize);
        if (size != 0) {
            batchInsert(httpEvents);
        }
    }

    public void event(AuditEvent auditEvent) {
        event(auditEvent, null);
    }

    public void event(AuditEvent auditEvent, String string1) {
        event(auditEvent, string1, null);
    }

    public void event(AuditEvent auditEvent, String string1, String string2) {
        event(auditEvent, string1, string2, null);
    }

    public void event(AuditEvent auditEvent, String string1, String string2, String string3) {
        Auditlog auditlog = new Auditlog();
        auditlog.setAuthor(UserContext.getUsername());
        auditlog.setEvent(auditEvent.name());
        auditlog.setStringAttribute1(string1);
        auditlog.setStringAttribute2(string2);
        auditlog.setStringAttribute3(string3);
        log(auditlog);
    }

    public void log(Auditlog auditlog) {
        setupDefaults(auditlog);
        queue.add(auditlog);
    }

    private void setupDefaults(Auditlog auditlog) {
        if (auditlog.getAuthor() == null) {
            auditlog.setAuthor(UserContext.getUsername());
        }
        if (auditlog.getEventDate() == null) {
            auditlog.setEventDate(new Date());
        }
    }

    private void batchInsert(List<Auditlog> auditlogs) {
        Session session = null;
        try {
            session = sessionFactory.openSession();
            Transaction transaction = session.beginTransaction();
            for (Auditlog auditlog : auditlogs) {
                session.save(auditlog);
            }
            session.flush();
            transaction.commit();
            log.debug("Added {} Auditlog in database", auditlogs.size());
        } catch (Exception e) {
            log.error("Error while inserting Auditlog", e);
        } finally {
            if (session != null) {
                session.close();
            }
        }
    }
}